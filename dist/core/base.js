// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  define(['underscore', './config', './deferred'], function(_, config, Deferred) {
    var Base, Logger, fn, method, _i, _len, _ref;
    if (config.development === true) {
      fn = function(type) {
        return function() {
          var console, messages;
          messages = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          console = typeof window !== "undefined" && window !== null ? window.console : void 0;
          if (!console) {
            return;
          }
          messages.unshift("[" + (type.toUpperCase()) + "][" + this.name + "]");
          return console[console[type] ? type : 'log'].apply(console, messages);
        };
      };
    } else {
      fn = function() {
        return function() {};
      };
    }
    Logger = (function() {
      function Logger(name, owner) {
        this.name = name != null ? name : 'logger';
        this.owner = owner;
      }

      return Logger;

    })();
    _ref = ['debug', 'info', 'warn', 'log', 'error'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      method = _ref[_i];
      Logger.prototype[method] = fn(method);
    }
    return Base = (function() {
      Base.Logger = Logger;

      Base.include = function() {
        var key, mixin, mixins, value, _j, _len1;
        mixins = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        for (_j = 0, _len1 = mixins.length; _j < _len1; _j++) {
          mixin = mixins[_j];
          for (key in mixin) {
            value = mixin[key];
            this.prototype[key] = value;
          }
        }
        return this;
      };

      Base.joinPath = function() {
        var paths;
        paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return paths.join('/').replace(/\/{2,}/g, '/');
      };

      Base.include(Deferred);

      function Base() {
        this.logger = new Base.Logger(this.name, this);
        this.initialize();
      }

      Base.prototype.initialize = function() {};

      Base.prototype.getOptionResult = function(options, key) {
        var value;
        if (!options) {
          return null;
        }
        value = key ? options[key] : options;
        if (_.isFunction(value)) {
          return value.apply(this);
        } else {
          return value;
        }
      };

      Base.prototype.extend = function(mixins) {
        var key, value, _results;
        if (!mixins) {
          return;
        }
        _results = [];
        for (key in mixins) {
          value = mixins[key];
          _results.push((function(_this) {
            return function(key, value) {
              var old;
              if (_.isFunction(value)) {
                old = _this[key];
                return _this[key] = function() {
                  var args;
                  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                  if (old) {
                    args.unshift(old);
                  }
                  return value.apply(this, args);
                };
              } else if (!_this[key]) {
                return _this[key] = value;
              }
            };
          })(this)(key, value));
        }
        return _results;
      };

      return Base;

    })();
  });

}).call(this);
