// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  define(['jquery', 'underscore', 'handlebars', 'backbone', './base', './config', './region', './loader', './module', './loaders/simple', './router', './helpers'], function($, _, Handlebars, Backbone, Base, config, Region, Loader, Module, SimpleLoader, Router, helpers) {
    var Application, getPath;
    getPath = function(root, path) {
      if (!path) {
        return root;
      }
      if (path.charAt(0) === '/') {
        return path;
      } else {
        return Base.joinPath(root, path);
      }
    };
    return Application = (function(_super) {
      __extends(Application, _super);

      function Application(options) {
        this.options = options != null ? options : {};
        this.name = 'application';
        this.scriptRoot = this.options.scriptRoot || config.scriptRoot;
        this.urlRoot = this.options.urlRoot || config.urlRoot;
        this.urlSuffix = this.options.urlSuffix || config.urlSuffix;
        this.modules = new Module.Container('Default Module Container');
        this.global = {};
        this.loaders = {};
        this.regions = [];
        Application.__super__.constructor.apply(this, arguments);
      }

      Application.prototype.initialize = function() {
        var key, value;
        this.registerLoader(new Loader(this), true);
        this.registerLoader(new SimpleLoader(this));
        for (key in helpers) {
          value = helpers[key];
          this.registerHelper(key, value);
        }
        return this.setRegion(new Region(this, null, 'Region Body', $(document.body)));
      };

      Application.prototype.path = function(path) {
        return getPath(this.scriptRoot, path);
      };

      Application.prototype.url = function() {
        var base, paths, withSuffix, _i;
        paths = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), base = arguments[_i++];
        withSuffix = (function(_this) {
          return function(p) {
            if (p.charAt(p.length - 1) === '/') {
              p = p.substring(0, p.length - 1);
            }
            if (_this.urlSuffix) {
              return p + _this.urlSuffix;
            } else {
              return p;
            }
          };
        })(this);
        if (base.charAt(0) === '/') {
          return withSuffix(base.substring(1));
        }
        paths.unshift(this.urlRoot);
        while (base.indexOf('../') === 0) {
          paths.pop();
          base = base.substring(3);
        }
        paths.push(base);
        return withSuffix(Base.joinPath.apply(Base, paths));
      };

      Application.prototype.registerLoader = function(loader, isDefault) {
        this.loaders[loader.name] = loader;
        if (isDefault) {
          return this.defaultLoader = loader;
        }
      };

      Application.prototype.registerHelper = function(name, fn) {
        var app;
        app = this;
        return Handlebars.registerHelper(name, function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return fn.apply(this, [app, Handlebars].concat(args));
        });
      };

      Application.prototype.getLoader = function(name) {
        var loader;
        loader = Loader.analyse(name).loader;
        if (loader && this.loaders[loader]) {
          return this.loaders[loader];
        } else {
          return this.defaultLoader;
        }
      };

      Application.prototype.extractName = function(name) {
        return Loader.analyse(name).name;
      };

      Application.prototype.setRegion = function(region) {
        this.region = region;
        return this.regions.unshift(this.region);
      };

      Application.prototype.startRoute = function() {
        var paths;
        paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (!this.router) {
          this.router = new Router(this);
        }
        return this.chain(this.router.mountRouter.apply(this.router, paths), function() {
          return Backbone.history.start();
        });
      };

      Application.prototype.navigate = function(path, options) {
        if (options == null) {
          options = {};
        }
        return Backbone.history.navigate(path, options);
      };

      Application.prototype.load = function() {
        var name, names;
        names = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return this.chain((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = names.length; _i < _len; _i++) {
            name = names[_i];
            _results.push(this.getLoader(name).loadModule(name));
          }
          return _results;
        }).call(this));
      };

      Application.prototype.show = function(feature, options) {
        return this.region.show(feature, options);
      };

      Application.prototype.success = function(title, content) {
        return alert(content || title);
      };

      Application.prototype.info = function(title, content) {
        if (!content) {
          content = title;
        }
        return alert(content || title);
      };

      Application.prototype.error = function(title, content) {
        if (!content) {
          content = title;
        }
        return alert(content || title);
      };

      return Application;

    })(Base);
  });

}).call(this);
