// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'backbone', './base'], function(_, Backbone, Base) {
    var Router, joinPath;
    joinPath = function() {
      var p, paths;
      paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      p = Base.joinPath.apply(Base, paths);
      p = p.charAt(0) === '/' ? p.substring(1) : p;
      if (p.charAt(p.length - 1) === '/') {
        return p.substring(0, p.length - 1);
      } else {
        return p;
      }
    };
    return Router = (function(_super) {
      __extends(Router, _super);

      Router.include(Backbone.Router.prototype);

      function Router(app) {
        this.app = app;
        this.name = 'Router';
        this.routes = {};
        this.dependencies = {};
        Backbone.Router.call(this);
        Router.__super__.constructor.apply(this, arguments);
      }

      Router.prototype.mountRouter = function() {
        var path, paths;
        paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return this.chain((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = paths.length; _i < _len; _i++) {
            path = paths[_i];
            _results.push(this.app.getLoader(path).loadRouter(path));
          }
          return _results;
        }).call(this), function(routers) {
          var i, router, _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = routers.length; _i < _len; i = ++_i) {
            router = routers[i];
            _results.push(this.addRouter(paths[i], router));
          }
          return _results;
        });
      };

      Router.prototype.addRouter = function(path, router) {
        var dependencies, key, p, routes, value, _results;
        routes = this.getOptionResult(router, 'routes');
        dependencies = this.getOptionResult(router, 'deps');
        for (key in dependencies) {
          value = dependencies[key];
          p = joinPath(path, key);
          this.dependencies[p] = value.charAt(0) === '/' ? value.substring(1) : joinPath(path, value);
        }
        _results = [];
        for (key in routes) {
          value = routes[key];
          p = joinPath(path, key);
          this.routes[p] = router[value];
          _results.push(this.route(p, this.createHandler(p)));
        }
        return _results;
      };

      Router.prototype.createHandler = function(path) {
        return function() {
          var args, d, deps, p, ps, _fn, _i, _len;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          deps = [path];
          d = this.dependencies[path];
          while (d != null) {
            deps.unshift(d);
            d = this.dependencies[d];
          }
          ps = [];
          _fn = (function(_this) {
            return function(p) {
              return ps.push(function(prev) {
                var arr;
                arr = prev ? [prev] : [];
                return this.routes[p].apply(this, arr.concat(args));
              });
            };
          })(this);
          for (_i = 0, _len = deps.length; _i < _len; _i++) {
            p = deps[_i];
            _fn(p);
          }
          return this.chain.apply(this, ps);
        };
      };

      return Router;

    })(Base);
  });

}).call(this);
