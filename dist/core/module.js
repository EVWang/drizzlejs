// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  define(['jquery', 'underscore', 'backbone', './base', './view', './region'], function($, _, Backbone, Base, View, Region) {
    var Layout, Module, ModuleContainer;
    ModuleContainer = (function(_super) {
      __extends(ModuleContainer, _super);

      function ModuleContainer(name) {
        this.name = name;
        this.modules = {};
        ModuleContainer.__super__.constructor.apply(this, arguments);
      }

      ModuleContainer.prototype.checkId = function(id) {
        if (!(id && _.isString(id))) {
          throw new Error("id: " + id + " is invalid");
        }
        if (this.modules[id]) {
          throw new Error("id: " + id + " is already used");
        }
      };

      ModuleContainer.prototype.get = function(id) {
        return this.modules[id];
      };

      ModuleContainer.prototype.changeId = function(from, to) {
        var module;
        if (from === to) {
          return;
        }
        this.checkId(to);
        module = this.modules[from];
        if (!module) {
          throw new Error("module with id: " + from + " not exists");
        }
        delete this.modules[from];
        module.id = to;
        return this.modules[to] = module;
      };

      ModuleContainer.prototype.add = function(module) {
        this.checkId(module.id);
        return this.modules[module.id] = module;
      };

      ModuleContainer.prototype.remove = function(id) {
        return delete this.modules[id];
      };

      return ModuleContainer;

    })(Base);
    Layout = (function(_super) {
      __extends(Layout, _super);

      function Layout() {
        return Layout.__super__.constructor.apply(this, arguments);
      }

      Layout.prototype.initialize = function() {
        this.isLayout = true;
        this.loadDeferred = this.chain("Initialize Layout", [this.loadTemplate(), this.loadHandlers()]);
        return delete this.bindData;
      };

      return Layout;

    })(View);
    Module = (function(_super) {
      __extends(Module, _super);

      Module.Container = ModuleContainer;

      Module.Layout = Layout;

      function Module(name, app, loader, options) {
        var a, _i, _ref;
        this.name = name;
        this.app = app;
        this.loader = loader;
        this.options = options;
        this.id = _.uniqueId('f');
        _ref = this.name.split('/'), a = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), this.baseName = _ref[_i++];
        this.container = options.container || this.app.modules;
        this.container.add(this);
        this.separatedTemplate = options.separatedTemplate === true;
        this.regions = {};
        Module.__super__.constructor.apply(this, arguments);
      }

      Module.prototype.initialize = function() {
        if (this.options.extend) {
          this.extend(this.options.extend);
        }
        this.loadDeferred = this.createDeferred("Initialize Module " + this.name);
        return this.chain([this.loadTemplate(), this.loadLayout(), this.loadData(), this.loadItems()], (function(_this) {
          return function() {
            return _this.loadDeferred.resolve();
          };
        })(this));
      };

      Module.prototype.loadTemplate = function() {
        if (this.separatedTemplate) {
          return;
        }
        return this.chain(this.loader.loadTemplate(this), (function(_this) {
          return function(template) {
            return _this.template = template;
          };
        })(this));
      };

      Module.prototype.loadLayout = function() {
        var layout, name;
        layout = this.getOptionResult(this.options, 'layout');
        name = _.isString(layout) ? layout : layout != null ? layout.name : void 0;
        name || (name = 'layout');
        return this.chain(this.app.getLoader(name).loadLayout(this, name, layout), (function(_this) {
          return function(obj) {
            return _this.layout = obj;
          };
        })(this));
      };

      Module.prototype.loadData = function() {
        var id, items, loadIt, promises, value;
        this.data = {};
        promises = [];
        items = this.getOptionResult(this.options, 'data') || {};
        this.autoLoadDuringRender = [];
        this.autoLoadAfterRender = [];
        loadIt = (function(_this) {
          return function(id, value, isModel) {
            value = _this.getOptionResult(value);
            if (value) {
              if (value.autoLoad === 'after' || value.autoLoad === 'afterRender') {
                _this.autoLoadAfterRender.push(id);
              } else if (value.autoLoad) {
                _this.autoLoadDuringRender.push(id);
              }
            }
            return promises.push(_this.chain(_this.app.getLoader(value)[isModel ? 'loadModel' : 'loadCollection'](value, _this), function(d) {
              return _this.data[id] = d;
            }));
          };
        })(this);
        for (id in items) {
          value = items[id];
          loadIt(id, value, value.type === 'model');
        }
        return this.chain.call(this, "load data for " + this.name, promises);
      };

      Module.prototype.loadItems = function() {
        var item, items, name, promises, _fn;
        this.items = {};
        this.inRegionItems = [];
        promises = [];
        items = this.getOptionResult(this.options, 'items') || [];
        _fn = (function(_this) {
          return function(name, item) {
            var isModule, p;
            item = _this.getOptionResult(item);
            if (_.isString(item)) {
              item = {
                region: item
              };
            }
            isModule = item.isModule;
            p = _this.chain(_this.app.getLoader(name)[isModule ? 'loadModule' : 'loadView'](name, _this, item), function(obj) {
              _this.items[obj.name] = obj;
              obj.regionInfo = item;
              if (item.region) {
                return _this.inRegionItems.push(obj);
              }
            });
            return promises.push(p);
          };
        })(this);
        for (name in items) {
          item = items[name];
          _fn(name, item);
        }
        return this.chain.call(this, "load items for " + this.name, promises);
      };

      Module.prototype.addRegion = function(name, el) {
        var type;
        type = el.data('region-type');
        return this.regions[name] = Region.create(type, this.app, this.module, name, el);
      };

      Module.prototype.removeRegion = function(name) {
        return delete this.regions[name];
      };

      Module.prototype.render = function(options) {
        if (options == null) {
          options = {};
        }
        if (!this.region) {
          throw new Error('No region to render in');
        }
        this.renderOptions = options;
        if (options.id) {
          this.container.changeId(this.id, options.id);
        }
        return this.chain("Render module " + this.name, this.loadDeferred, function() {
          var _ref;
          return (_ref = this.options.beforeRender) != null ? _ref.apply(this) : void 0;
        }, function() {
          return this.layout.setRegion(this.region);
        }, this.fetchDataDuringRender, function() {
          return this.layout.render();
        }, function() {
          var _ref;
          return (_ref = this.options.afterLayoutRender) != null ? _ref.apply(this) : void 0;
        }, function() {
          var promises, region, value;
          promises = (function() {
            var _i, _len, _ref, _results;
            _ref = this.inRegionItems;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              value = _ref[_i];
              region = this.regions[value.regionInfo.region];
              if (!region) {
                this.logger.error("Can not find region: " + key);
              }
              _results.push(region.show(value));
            }
            return _results;
          }).call(this);
          return this.chain(promises);
        }, function() {
          var _ref;
          return (_ref = this.options.afterRender) != null ? _ref.apply(this) : void 0;
        }, this.fetchDataAfterRender);
      };

      Module.prototype.setRegion = function(region) {
        this.region = region;
      };

      Module.prototype.close = function() {
        return this.chain("Close module: " + this.name, function() {
          var _ref;
          return (_ref = this.options.beforeClose) != null ? _ref.apply(this) : void 0;
        }, function() {
          return this.layout.close();
        }, function() {
          var key, value, _ref, _results;
          _ref = this.regions;
          _results = [];
          for (key in _ref) {
            value = _ref[key];
            _results.push(value.close());
          }
          return _results;
        }, function() {
          var _ref;
          return (_ref = this.options.afterClose) != null ? _ref.apply(this) : void 0;
        }, function() {
          return this.container.remove(this.id);
        });
      };

      Module.prototype.fetchDataDuringRender = function() {
        var id;
        return this.chain((function() {
          var _base, _i, _len, _ref, _results;
          _ref = this.autoLoadDuringRender;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            id = _ref[_i];
            _results.push(typeof (_base = this.data[id]).fetch === "function" ? _base.fetch() : void 0);
          }
          return _results;
        }).call(this));
      };

      Module.prototype.fetchDataAfterRender = function() {
        var id;
        return this.chain((function() {
          var _base, _i, _len, _ref, _results;
          _ref = this.autoLoadAfterRender;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            id = _ref[_i];
            _results.push(typeof (_base = this.data[id]).fetch === "function" ? _base.fetch() : void 0);
          }
          return _results;
        }).call(this));
      };

      return Module;

    })(Base);
    return Module;
  });

}).call(this);
