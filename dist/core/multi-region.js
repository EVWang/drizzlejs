// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', './region'], function($, _, Region) {
    var MultiRegion;
    return MultiRegion = (function(_super) {
      __extends(MultiRegion, _super);

      function MultiRegion() {
        MultiRegion.__super__.constructor.apply(this, arguments);
        this.items = {};
        this.elements = {};
      }

      MultiRegion.prototype.activate = function(item) {};

      MultiRegion.prototype.createElement = function(key, item) {
        var el;
        el = $('<div></div>');
        this.el.append(el);
        return el;
      };

      MultiRegion.prototype.getEl = function(item) {
        var key, _ref;
        if (!item) {
          return this.el;
        }
        key = (_ref = item.regionInfo) != null ? _ref.key : void 0;
        if (!key) {
          return null;
        }
        return this.elements[key] || (this.elements[key] = this.createElement(key, item));
      };

      MultiRegion.prototype.close = function(item) {
        var key, _ref;
        if (!item) {
          return this.chain('close all items', function() {
            var v, _i, _len, _ref, _results;
            _ref = this.items;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              v = _ref[_i];
              _results.push(v.close());
            }
            return _results;
          });
          (function() {
            this.empty();
            this.items = {};
            this.elements = {};
            return this;
          });
        }
        key = (_ref = item.regionInfo) != null ? _ref.key : void 0;
        if (!key) {
          return;
        }
        if (this.items[key].id !== item.id) {
          throw new Error('Trying to close an item which is not in the region');
        }
        return this.chain('close item:' + item.name, function() {
          return item.close();
        }, function() {
          delete this.items[key];
          this.elements[key].empty();
          this.currentItem = null;
          return this;
        });
      };

      MultiRegion.prototype.showItem = function(item, options, deferred) {
        var info, key;
        if (!(item && item.render && item.setRegion)) {
          this.logger.warn("try to show an item which is neither a view nor a module");
          return deferred.reject(item);
        }
        info = item.regionInfo || (item.regionInfo = {});
        key = info.key || (info.key = _.uniqueId('K'));
        if (this.items[key] && this.items[key].id === item.id) {
          return this.chain('show item:' + item.name, item.render(options), function() {
            return deferred.resolve(item);
          });
        }
        return this.chain('show item:' + item.name, [
          function() {
            if (item.region && item.region.id !== this.id) {
              return item.region.close(item);
            }
          }, function() {
            if (this.items[key]) {
              return this.close(this.items[key]);
            }
          }
        ], function() {
          this.items[key] = item;
          return item.setRegion(this);
        }, function() {
          return item.render(options);
        }).done(function() {
          return deferred.resolve(item);
        });
      };

      return MultiRegion;

    })(Region);
  });

}).call(this);
