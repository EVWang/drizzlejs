// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  define(['jquery', 'underscore', 'backbone', 'handlebars', './base', './config', './module', './view', './collection'], function($, _, Backbone, Handlebars, Base, config, Module, View, Collection) {
    var Loader;
    Loader = (function(_super) {
      __extends(Loader, _super);

      Loader.TemplateCache = {};

      Loader.analyse = function(name) {
        var args, loader, _ref;
        if (!_.isString(name)) {
          return {
            loader: null,
            name: name
          };
        }
        _ref = name.split(':'), loader = _ref[0], name = _ref[1], args = 3 <= _ref.length ? __slice.call(_ref, 2) : [];
        if (!name) {
          name = loader;
          loader = null;
        }
        return {
          loader: loader,
          name: name,
          args: args
        };
      };

      function Loader(app, name) {
        this.app = app;
        this.name = name != null ? name : 'Default Loader';
        Loader.__super__.constructor.apply(this, arguments);
      }

      Loader.prototype.loadResource = function(path, plugin) {
        var error, wish;
        path = this.app.path(path);
        if (plugin) {
          path = plugin + '!' + path;
        }
        wish = this.createDeferred("load-" + path);
        error = (function(_this) {
          return function(e) {
            var _ref;
            _this.logger.warn('resource:', path, 'not found, define it to null', e);
            if (((_ref = e.requireModules) != null ? _ref[0] : void 0) === path) {
              define(path, null);
              require.undef(path);
              require([path], function() {});
              return wish.resolve(null);
            } else {
              wish.reject(null);
              throw e;
            }
          };
        })(this);
        require([path], (function(_this) {
          return function(obj) {
            _this.logger.debug('load resource:', path, 'done, got:', obj);
            if (_.isFunction(obj)) {
              obj = obj(_this.app);
            }
            return wish.resolve(obj);
          };
        })(this), error);
        return wish.promise();
      };

      Loader.prototype.loadModuleResource = function(module, path, plugin) {
        return this.loadResource(Base.joinPath(module.name, path), plugin);
      };

      Loader.prototype.loadModule = function(path, parentModule) {
        var name;
        name = Loader.analyse(path).name;
        return this.chain("load module: " + path, this.loadResource(Base.joinPath(name, 'index')), (function(_this) {
          return function(options) {
            return new Module(name, _this.app, _this, options);
          };
        })(this));
      };

      Loader.prototype.loadView = function(name, module, options) {
        name = Loader.analyse(name).name;
        return this.chain("load view: " + name + " in module " + module.name, this.loadModuleResource(module, config.fileNames.view + name), (function(_this) {
          return function(options) {
            return new View(name, module, _this, options);
          };
        })(this));
      };

      Loader.prototype.loadLayout = function(module, name, layout) {
        if (layout == null) {
          layout = {};
        }
        name = Loader.analyse(name).name;
        return this.chain("load layout: " + name + " for module " + module.name, layout.templateOnly === false ? this.loadModuleResource(module, name) : {}, (function(_this) {
          return function(options) {
            return new Module.Layout(name, module, _this, _.extend(layout, options));
          };
        })(this));
      };

      Loader.prototype.innerLoadTemplate = function(module, p) {
        var path, template;
        path = p + '.html';
        template = Loader.TemplateCache[module.name + path];
        if (!template) {
          template = Loader.TemplateCache[module.name + path] = this.loadModuleResource(module, path, 'text');
        }
        return this.chain("load template: " + path, template, (function(_this) {
          return function(t) {
            if (_.isString(t)) {
              t = Loader.TemplateCache[path] = Handlebars.compile(t);
            }
            return t;
          };
        })(this));
      };

      Loader.prototype.loadTemplate = function(module) {
        var path;
        path = config.fileNames.templates;
        return this.innerLoadTemplate(module, path);
      };

      Loader.prototype.loadSeparatedTemplate = function(view, name) {
        var path;
        path = config.fileNames.template + name;
        return this.innerLoadTemplate(view.module, path);
      };

      Loader.prototype.parseUrl = function(u, module) {
        var prefix, url;
        if (u == null) {
          u = '';
        }
        url = _.isFunction(u) ? u.apply(module) : u;
        prefix = module.options.urlPrefix ? module.options.urlPrefix + module.name : module.name;
        return this.app.url(prefix, url || '');
      };

      Loader.prototype.loadModel = function(name, module) {
        var data, m, model;
        if (name == null) {
          name = '';
        }
        if (name instanceof Backbone.Model) {
          return name;
        }
        if (_.isString(name)) {
          name = {
            url: name
          };
        }
        name = _.extend({}, name);
        name.urlRoot = this.parseUrl(name.url, module);
        delete name.url;
        delete name.autoLoad;
        data = name.data;
        delete name.data;
        model = Backbone.Model.extend(name);
        m = new model();
        if (data) {
          m.set(data);
        }
        return m;
      };

      Loader.prototype.loadCollection = function(name, module) {
        if (name == null) {
          name = '';
        }
        if (name instanceof Backbone.Collection || name instanceof Backbone.Model) {
          return name;
        }
        if (_.isString(name)) {
          name = {
            url: name
          };
        }
        name = _.extend({}, name);
        name.url = this.parseUrl(name.url, module);
        return new Collection(null, name);
      };

      Loader.prototype.loadHandlers = function(view, name) {
        return view.options.handlers || {};
      };

      Loader.prototype.loadRouter = function(path) {
        var name;
        name = Loader.analyse(path).name;
        path = Base.joinPath(name, config.fileNames.router);
        if (path.charAt(0) === '/') {
          path = path.substring(1);
        }
        return this.chain('load router:' + path, this.loadResource(path));
      };

      return Loader;

    })(Base);
    return Loader;
  });

}).call(this);
