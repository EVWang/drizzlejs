// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'underscore'], function(Backbone, _) {
    var Collection;
    return Collection = (function(_super) {
      __extends(Collection, _super);

      function Collection(models, options) {
        if (options == null) {
          options = {};
        }
        this.options = options;
        this.params = {};
        this.url = options.url;
        if (this.options.pageable) {
          this.options.pagination = {
            page: options.page || 1,
            pageSize: options.pageSize || 10,
            firstKey: options.firstKey || '_first',
            pageSizeKey: options.pageSizeKey || '_pageSize',
            recordCountKey: options.recordCountKey || 'recordCount'
          };
          this.turnPage = function(page, options) {
            if (page > this.options.pagination.pageCount || page < 1) {
              return;
            }
            this.options.pagination.page = page;
            return this.fetch(options);
          };
          this.nextPage = function(options) {
            var page;
            page = this.options.pagination.page + 1;
            return this.turnPage(page, options);
          };
          this.prevPage = function(options) {
            var page;
            page = this.options.pagination.page - 1;
            return this.turnPage(page, options);
          };
          this.getPageInfo = function() {
            var d, p;
            p = this.options.pagination;
            if (!p) {
              return {};
            }
            d = {
              start: (p.page - 1) * p.pageSize + 1,
              end: p.page * p.pageSize,
              total: p.recordCount
            };
            d.end = d.end > d.total ? d.total : d.end;
            return d;
          };
        }
        Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.parse = function(resp, options) {
        var p;
        if (this.options.pageable) {
          p = this.options.pagination;
          p.recordCount = resp[p.recordCountKey];
          p.pageCount = Math.ceil(p.recordCount / p.pageSize);
        }
        if (this.options.root) {
          return resp[this.options.root];
        } else {
          return resp;
        }
      };

      Collection.prototype.fetch = function(options) {
        var data, p;
        data = _.extend({}, this.options.params, this.params);
        if (this.options.pageable) {
          p = this.options.pagination;
          data[p.firstKey] = p.pageSize * (p.page - 1);
          data[p.pageSizeKey] = p.pageSize;
        }
        options || (options = {});
        data = _.extend(data, options.data);
        options.data = data;
        return Collection.__super__.fetch.call(this, options);
      };

      return Collection;

    })(Backbone.Collection);
  });

}).call(this);
