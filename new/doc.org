* Loader 类型加载
  Loader 的作用是加载定义文件, 创建类实例.

  加载定义文件可能是同步的(如: CMD), 也可能是异步的(如: AMD, http 加载)

  Loader 需要确保实例里的所有操作不受这里的同步/异步的影响, 所以所有的实例都由 Loader 创建,
  类实例中如果有需要加载文件, 必须写在 *_load* 方法中, 并返回 Promise, 当这个 Promise resolve 的时候,
  所有相关的文件及实例都应该加载完毕

** 管理自定义 Loader

*** 设置系统默认加载器
    #+BEGIN_SRC javascript
    Drizzle.setDefaultLoader(new Drizzle.Loader(file => {
      // 这个方法必须返回一个 Promise, 用`file`的内容 resolve 这个 Promise

      // CMD
      return Promise.resolve(require(`./${file}`));

      // AMD
      return new Promise((resolve, reject) => {
        require([file], resolve, reject);
      });

      // from a global namespace
      return Promise.resolve(modules[file]);

    }));
    #+END_SRC

*** 注册自定义 Loader
    #+BEGIN_SRC javascript
    // 第一参数为自定义 Loader 的名称
    // 第二参数为自定义 Loader 的实例
    Drizzle.Loader.register('npm', new CustomizeLoader());
    #+END_SRC

*** 引用自定义 Loader
    #+BEGIN_SRC javascript
    // 下面的代码在 Module 中定义了另一个 Module(`module/name`) 的引用
    exports.items = {
      viewId: {
        // 未指定 loader, 会使用 parent 的 loader 来加载这个 View
        // 如果不存在 parent, 则会使用默认的 loader 来加载
        name: 'viewName'
      }

      moduleId: {
        isModule: true,
        
        // 指定使用 npm 来加载 module/name, arg1 与 arg2 是传给 loader 的参数
        // module/name 是 module 的名字
        name: 'npm:arg1:arg2:module/name'
      }
    }
    #+END_SRC


** 加载类型定义文件

*** 类型定义文件
     - Module 定义文件

       | Script root | Module name | File name |
       |-------------+-------------+-----------|
       | app/        | module/name | /index.js |

     - View 定义文件

       | Script root | Module name | View name         |
       |-------------+-------------+-------------------|
       | app/        | module/name | /view-viewName.js |

     - Store 定义文件

       | Script root | Module name | File name |
       |-------------+-------------+-----------|
       | app/        | module/name | /store.js |

*** 配置文件路径

    | Variable name      | Default value | Description                                |
    |--------------------+---------------+--------------------------------------------|
    | Loader.SCRIPT_ROOT | app           | 定义文件的根目录                           |
    | Loader.MODULE      | index         | Module 定义文件的文件名                    |
    | Loader.STORE       | store         | Store 定义文件的文件名                     |
    | Loader.VIEW_PREFIX | view-         | View 定义文件的前缀, 文件名是前缀+ViewName |


** 创建类型实例
   - 需要调 ~_load~ 方法的类有: ~Module~, ~View~, ~Store~
   - 不需要调 ~_load~ 方法的类有: ~Region~, ~Model~
   

* 数据处理
  
  框架采用 [[http://redux.js.org/][Redux]] 类似的单向数据流来控制数据展示

  |---------------+------+--------------------------------------+------+--------------|
  | View/Module   |      | Store                                |      | View/Module  |
  |               | ---> |                                      | ---> |              |
  | Create Action |      | Handle Action ---> Change Model Data |      | Render Again |
  |---------------+------+--------------------------------------+------+--------------|

** Store 定义

*** 定义 Model
    #+BEGIN_SRC javascript
    exports.models = {
      modelName: {
        // 可选, model 的类型, 
        type: CustomizeModel, 

        // 可选, 定义 model 的请求地址
        // 可以在 URL 中加参数, 在发送请求时, 会用 data 中的值进行替换
        // 如果是 GET 请求, 还会从 params 里取值来进行替换
        url: 'url/to/be/used/{param}/{from}/{data}/{or}/{params}', 

        // 可选, 在调用 model.set 方法时对数据进行额外处理
        // 返回值将设置到 model.data
        parse (data) {
          return parsedData;
        },

        // 可选, 相当于: parse (data) { return data.root; }
        root: 'root',

        // 可选, 设置初始化数据
        data: defaultData,

        // 可选, 设置初始化请求参数 
        // 仅用于 GET 请求
        // 之所以单独出来, 是因为 data 数据会被请求返回数据覆盖, 但 GET 请求的请求参数需要保留
        params: { default: params }
      }
    }
    #+END_SRC

*** 默认Model: state
*** 定义 Actions
*** 初始化状态

