// Generated by CoffeeScript 1.6.3
var __slice = [].slice;

define(['jquery', 'underscore', './config'], function($, _, config) {
  var create;
  if (config.development === true) {
    create = function(name, obj) {
      var key, me, _fn, _i, _len, _ref;
      if (!obj) {
        obj = $.Deferred();
      }
      if (!name) {
        return obj;
      }
      if (!obj.promise) {
        return obj;
      }
      this.logger.debug('[Deferred]', name, '[create]');
      me = this;
      _ref = ['resolve', 'reject', 'notify'];
      _fn = function(key) {
        var old;
        old = obj[key + 'With'];
        return obj[key + 'With'] = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          me.logger.debug('[Deferred]', name, "[" + key + "]");
          return old.apply(obj, args);
        };
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        _fn(key);
      }
      return obj;
    };
  } else {
    create = function() {
      var obj;
      if (!obj) {
        obj = $.Deferred();
      }
      return obj;
    };
  }
  return {
    createDeferred: function(name, obj) {
      return create.call(this, name, obj);
    },
    deferred: function() {
      var args, fn, name, obj, returned;
      name = arguments[0], fn = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (name && !_.isString(name)) {
        if (fn != null) {
          args.unshift(fn);
        }
        fn = name;
        name = null;
      }
      if (fn != null ? fn.promise : void 0) {
        return this.createDeferred(name, fn).promise();
      }
      obj = this.createDeferred(name);
      if (_.isFunction(fn)) {
        returned = fn.apply(this, args.concat([obj]));
        if (returned === obj) {
          return obj.promise();
        }
        if (returned != null ? returned.promise : void 0) {
          return returned.promise();
        }
        obj.resolve(returned);
      } else {
        obj.resolve(fn);
      }
      return obj.promise();
    },
    chain: function() {
      var args, name,
        _this = this;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (!_.isString(name)) {
        args.unshift(name);
        name = null;
      }
      if (args.length === 0 || (args.length === 1 && !_.isArray(args[0]))) {
        return this.deferred(name, args[0]);
      }
      return this.deferred(name, function(deferred) {
        var done, fail, gots, i, previous, process, progress;
        gots = [];
        previous = null;
        i = 0;
        process = function(item) {
          var j, p, ps;
          return (_.isArray(item) ? item.length === 0 ? _this.deferred(null, []) : item.length === 1 ? _this.deferred(null, item[0], previous, [].concat(gots)).then(function() {
            var args, data;
            data = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            if (args.length > 0) {
              args.unshift(data);
              data = args;
            }
            return [data];
          }) : (ps = (function() {
            var _i, _len, _ref, _results;
            _ref = _.flatten(item);
            _results = [];
            for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {
              p = _ref[j];
              _results.push(this.deferred(null, p, previous, [].concat(gots)));
            }
            return _results;
          }).call(_this), ps || (ps = []), $.when.apply($, ps).then(function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return args;
          })) : _this.deferred(null, item, previous, [].concat(gots))).done(done).fail(fail).progress(progress);
        };
        done = function() {
          var data, others;
          data = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          if (others.length > 0) {
            others.unshift(data);
            data = others;
          }
          gots.push(data);
          previous = data;
          if (args.length === 0) {
            return deferred.resolve(previous);
          } else {
            return process(args.shift());
          }
        };
        fail = function() {
          var data;
          data = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (data.length === 1) {
            data = data[0];
          }
          gots.push(data);
          previous = data;
          return deferred.reject(previous, gots);
        };
        progress = function() {
          var data;
          data = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return deferred.nodify(data);
        };
        process(args.shift());
        return deferred;
      });
    }
  };
});
