// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

define(['jquery', 'underscore', 'backbone', 'handlebars', './base', './config', './module', './view'], function($, _, Backbone, Handlebars, Base, config, Module, View) {
  var Loader;
  require.s.contexts._.config.urlArgs = !config.cache ? '_c=' + (new Date()).getTime() : '';
  Loader = (function(_super) {
    __extends(Loader, _super);

    Loader.TemplateCache = {};

    Loader.analyse = function(name) {
      var args, loader, _ref;
      if (!_.isString(name)) {
        return {
          loader: null,
          name: name
        };
      }
      _ref = name.split(':'), loader = _ref[0], name = _ref[1], args = 3 <= _ref.length ? __slice.call(_ref, 2) : [];
      if (!name) {
        name = loader;
        loader = null;
      }
      return {
        loader: loader,
        name: name,
        args: args
      };
    };

    function Loader(app, name) {
      this.app = app;
      this.name = name != null ? name : 'Default Loader';
      Loader.__super__.constructor.apply(this, arguments);
    }

    Loader.prototype.loadResource = function(path, plugin) {
      var error, wish,
        _this = this;
      path = this.app.path(path);
      if (plugin) {
        path = plugin + '!' + path;
      }
      wish = this.createDeferred("load-" + path);
      error = function(e) {
        var _ref;
        _this.logger.warn('resource:', path, 'not found, define it to null');
        if (((_ref = e.requireModules) != null ? _ref[0] : void 0) === path) {
          define(path, null);
          require.undef(path);
          require([path], function() {});
          return wish.resolve(null);
        } else {
          wish.reject(null);
          throw e;
        }
      };
      require([path], function(obj) {
        _this.logger.debug('load resource:', path, 'done, got:', obj);
        return wish.resolve(obj);
      }, error);
      return wish.promise();
    };

    Loader.prototype.loadModuleResource = function(module, path, plugin) {
      return this.loadResource(Base.joinPath(module.name, path), plugin);
    };

    Loader.prototype.loadModule = function(path, parentModule) {
      var name,
        _this = this;
      name = Loader.analyse(path).name;
      return this.chain("load module: " + path, this.loadResource(Base.joinPath(name, 'index')), function(options) {
        return new Module(name, _this.app, _this, options);
      });
    };

    Loader.prototype.loadView = function(name, module, options) {
      var _this = this;
      name = Loader.analyse(name).name;
      return this.chain("load view: " + name + " in module " + module.name, this.loadModuleResource(module, config.fileNames.view + name), function(options) {
        return new View(name, module, _this, options);
      });
    };

    Loader.prototype.loadLayout = function(module, name, layout) {
      var _this = this;
      if (layout == null) {
        layout = {};
      }
      name = Loader.analyse(name).name;
      return this.chain("load layout: " + name + " for module " + module.name, layout.templateOnly === false ? this.loadModuleResource(module, name) : {}, function(options) {
        return new Module.Layout(name, module, _this, options);
      });
    };

    Loader.prototype.innerLoadTemplate = function(module, p) {
      var path, template,
        _this = this;
      path = p + '.html';
      template = Loader.TemplateCache[path];
      if (!template) {
        template = Loader.TemplateCache[path] = this.loadModuleResource(module, path, 'text');
      }
      return this.chain("load template: " + path, template, function(t) {
        if (_.isString(t)) {
          t = Loader.TemplateCache[path] = Handlebars.compile(t);
        }
        return t;
      });
    };

    Loader.prototype.loadTemplate = function(module) {
      var path;
      path = config.fileNames.templates;
      return this.innerLoadTemplate(module, path);
    };

    Loader.prototype.loadSeparatedTemplate = function(view, name) {
      var path;
      path = config.fileNames.template + name;
      return this.innerLoadTemplate(view.module, path);
    };

    Loader.prototype.parseUrl = function(url, module) {
      if (url == null) {
        url = '';
      }
      if (_.isFunction(url)) {
        url = url.apply(module);
      }
      if (url.charAt(0) === '/') {
        return url.substring(1);
      } else if (url.indexOf('../') === 0) {
        if (this.app.urlRoot) {
          return Base.joinPath(this.app.urlRoot, url.substring(3));
        } else {
          return url.substring(3);
        }
      } else {
        if (this.app.urlRoot) {
          return Base.joinPath(this.app.urlRoot, module.name, url);
        } else {
          return Base.joinPath(module.name, url);
        }
      }
    };

    Loader.prototype.loadModel = function(name, module) {
      var model, url;
      if (name == null) {
        name = '';
      }
      if (name instanceof Backbone.Model) {
        return name;
      }
      if (_.isString(name)) {
        name = {
          url: name
        };
      }
      url = _.isFunction(name.url) ? name.url.apply(module) : url;
      name.urlRoot = this.app.url(module.name, url || '');
      delete name.url;
      model = Backbone.Model.extend(name);
      return new model();
    };

    Loader.prototype.loadCollection = function(name, module) {
      var collection, url;
      if (name == null) {
        name = '';
      }
      if (name instanceof Backbone.Collection) {
        return name;
      }
      if (_.isString(name)) {
        name = {
          url: name
        };
      }
      url = _.isFunction(name.url) ? name.url.apply(module) : url;
      name.url = this.app.url(module.name, url || '');
      collection = Backbone.Collection.extend(name);
      return new collection();
    };

    Loader.prototype.loadHandlers = function(view, name) {
      return view.options.handlers || {};
    };

    return Loader;

  })(Base);
  return Loader;
});
